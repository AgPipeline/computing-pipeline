#!/usr/bin/env python

'''
EnvironmentalLoggerAnalyser.py

----------------------------------------------------------------------------------------
This module will read data generated by Environmental Sensor and convert to netCDF file
----------------------------------------------------------------------------------------
Prerequisite:
1. Python (2.7+ recommended)
2. netCDF4 module for Python (and many other supplements such as numpy, scipy and HDF5 if needed)
----------------------------------------------------------------------------------------

Usage:
python EnvironmentalLoggerAnalyser.py drc_in drc_out
python EnvironmentalLoggerAnalyser.py fl_in drc_out
where drc_in is input directory, drc_out is output directory, fl_in is input file
Input  filenames must have '.json' extension
Output filenames will have '.nc' extension

UCI test:
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py ${DATA}/terraref/environmentlogger_test.json ${DATA}/terraref

UCI production:
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py ${DATA}/terraref/EnvironmentLogger/2016-04-07/2016-04-07_12-00-07_enviromentlogger.json ~/rgr

Roger production:
module add gdal-stack-2.7.10 
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py /projects/arpae/terraref/raw_data/ua-mac/EnvironmentLogger/2016-04-07/2016-04-07_12-00-07_enviromentlogger.json ~/rgr

EnvironmentalLoggerAnalyser.py will take the second parameter as the input folder (containing JSON files,
but it can also be one single file) and the third parameter as the output folder (will dump netCDF files here).
If the output folder does not exist, EnvironmentalLoggerAnalyser.py will create it.

----------------------------------------------------------------------------------------
20160429: Output JSON file is now completely composed by variables
          2D spectrometer variables (wavelength and spectrum) are available in the exported file
20160503: Add chunksizes parameters for time, which significantly reduces the processing time (and the file size)
          Add timestamps and commandLine the user used for each exported file
          Remind the user currently the script is dealing with which file
20160508: 1. Now the members in "timestamp" array are double-precison floats, with unit of days offset from
          the UNIX base time (In Gregorian Calender).
          2. Remove unnecessary I/O (in wavelength, because we only need the wavelengths in the first set of readings)
20160509: 1. Retrieve the adjustment Professor Zender made in version a38ca7d, May 4th.
          2. Rename the wavelength variable and dimension as "wvl_lgr" to avoid the naming
          collision with nco

TODO:
1. Create a time array including string of timestamps (dimension=time). 
----------------------------------------------------------------------------------------
Note:
If you need a different base time, it is named "_UNIX_BASETIME" and located at the 
beginning of the script as a global variable. You could simply change the parameters 
as they are named.
----------------------------------------------------------------------------------------
Thanks for the advice from Professor Zender and testing data from Mr. Maloney
----------------------------------------------------------------------------------------
'''

import json
import time
import sys
import os
from datetime import date, datetime
from netCDF4 import Dataset

_UNIT_DICTIONARY = {u'm': 'meter', u"hPa": "hecto-Pascal", u"DegCelsius": "Celsius",
                    u's': 'second', u'm/s': 'meter second-1', u"mm/h": 'millimeter hour-1',
                    u"relHumPerCent": "percent", u"?mol/(m^2*s)": "micromole meter-2 second-1",
                    u'kilo Lux': 'kilo Lux', u'degrees': 'degrees', '': ''}
_NAMES = {'sensor par': 'Sensor Photosynthetically Active Radiation'}
_UNIX_BASETIME = date(year=1970, month=1, day=1)


def formattingTheJSONFileAndReturnWavelengthAndSpectrum(fileLocation):
    '''
    This function will format the source JSON file including multiple JSON objects
    into a file of JSON array
    '''
    with open(fileLocation, 'r') as fileHandler:
        tempList, wavelengthList, spectrumList, k, writeToWavelength =\
            fileHandler.read().split('\n'), [], [[]], 0, True
        for i in range(len(tempList)):
            if "wavelength" in tempList[i] and writeToWavelength:
                wavelengthList.append(
                    float(tempList[i][tempList[i].find(':') + 1: -2]))
            if "wavelength" not in tempList[i] and "wavelength" in tempList[i - 4]\
                    and "band" not in tempList[i] and "," not in tempList[i]:
                writeToWavelength = False
                spectrumList.append([])
                k += 1
            if "spectrum" in tempList[i]:
                spectrumList[k].append(
                    float(tempList[i][tempList[i].find(':') + 1: -2]))

        spectrumList.remove([])

    return wavelengthList, spectrumList


def JSONHandler(fileLocation):
    '''
    Main JSON handler, write JSON file to a Python list with standard JSON module
    '''
    wavelength, spectrum = formattingTheJSONFileAndReturnWavelengthAndSpectrum(
        fileLocation)
    with open(fileLocation, 'r') as fileHandler:
        return json.loads(fileHandler.read()), wavelength, spectrum


def renameTheValue(name):
    '''
    Rename the value so it becomes legal in netCDF
    '''
    if type(name) is unicode:
        name = name.encode('ascii', 'ignore')
    if name in _UNIT_DICTIONARY:
        name = _UNIT_DICTIONARY[name]
    elif name in _NAMES:
        name = _NAMES[name]

    return name.replace(" ", "_")


def getSpectrometerInformation(arrayOfJSON):
    '''
    Collect information from spectrometer with special care
    '''
    maxFixedIntensity = [int(intensityMembers["spectrometer"]["maxFixedIntensity"]) for intensityMembers in
                         arrayOfJSON]
    integrationTime = [int(integrateMembers["spectrometer"]["integration time in ?s"]) for integrateMembers in
                       arrayOfJSON]

    return maxFixedIntensity, integrationTime


def getListOfValue(arrayOfJSON, dataName):
    '''
    Collect data from JSON objects which have "value" member
    '''
    return [float(valueMembers[dataName]['value'].encode('ascii', 'ignore')) for valueMembers in arrayOfJSON]


def getListOfRawValue(arrayOfJSON, dataName):
    '''
    Collect data from JSON objects which have "rawValue" member
    '''
    return [float(valueMembers[dataName]['rawValue'].encode('ascii', 'ignore')) for valueMembers in arrayOfJSON]


def _timeStamp():
    '''
    Record the time the script is triggered
    '''
    return time.strftime("%a %b %d %H:%M:%S %Y",  time.localtime(int(time.time())))


def translateTime(timeString):
    '''
    Translate the time the metadata included as the days offset to the basetime.
    '''
    timeUnpack = datetime.strptime(timeString, "%Y.%m.%d-%I:%M:%S").timetuple()
    timeSplit  = date(year=timeUnpack.tm_year, month=timeUnpack.tm_mon,
                     day=timeUnpack.tm_mday) - _UNIX_BASETIME

    return (timeSplit.total_seconds() + timeUnpack.tm_hour * 3600.0 + timeUnpack.tm_min * 60.0 +
            timeUnpack.tm_sec) / (3600.0 * 24.0)


def main(JSONArray, outputFileName, wavelength=None, spectrum=None, recordTime=None, commandLine=None):
    '''
    Main netCDF handler, write data to the netCDF file indicated.
    '''
    netCDFHandler    = Dataset(outputFileName, 'w', format='NETCDF4')
    dataMemberList   = [JSONMembers[u"environment_sensor_set_reading"]
                      for JSONMembers in JSONArray]
    timeStampList    = [translateTime(JSONMembers[u'timestamp'])
                     for JSONMembers in dataMemberList]
    timeDimension    = netCDFHandler.createDimension("time", None)
    tempTimeVariable = netCDFHandler.createVariable(
        'timestamps', 'f8', ('time',), chunksizes=(1,))
    for i in range(len(timeStampList)):  # Assign Times
        tempTimeVariable[i] = timeStampList[i]
    setattr(tempTimeVariable, "units",     "days since 1970.01.01-00:00:00 (UNIX base time)")
    setattr(tempTimeVariable, "calender", "Gregorian")

    for data in dataMemberList[0]:
        if data != 'spectrometer' and type(dataMemberList[0][data]) not in (str, unicode):
            tempVariable = netCDFHandler.createVariable(
                renameTheValue(data), 'f4', ('time',))
            tempVariable[:] = getListOfValue(
                dataMemberList, data)  # Assign "values"
            if 'unit' in dataMemberList[0][data]:  # Assign Units
                setattr(tempVariable, 'units', _UNIT_DICTIONARY[
                        dataMemberList[0][data]['unit']])
            if 'rawValue' in dataMemberList[0][data]:  # Assign "rawValues"
                netCDFHandler.createVariable(renameTheValue(data) + '_rawValue', 'f4', ('time',))[:] =\
                    getListOfRawValue(dataMemberList, data)
        elif type(dataMemberList[0][data]) in (str, unicode):
            netCDFHandler.createVariable(renameTheValue(data), str)[
                0] = dataMemberList[0][data]

        if data == 'spectrometer':  # Special care for spectrometers :)
            netCDFHandler.createVariable('Spectrometer_maxFixedIntensity', 'f4', ('time',))[:] =\
                getSpectrometerInformation(dataMemberList)[0]
            netCDFHandler.createVariable('Spectrometer_Integration_Time_In_Microseconds', 'f4', ('time',))[:] =\
                getSpectrometerInformation(dataMemberList)[1]

    if wavelength and spectrum:
        netCDFHandler.createDimension("wvl_lgr", len(wavelength))
        netCDFHandler.createVariable("wvl_lgr", 'f4', ('wvl_lgr',))[
            :] = wavelength
        setattr(netCDFHandler.variables['wvl_lgr'], 'units', 'nanometers')
        setattr(netCDFHandler.variables['wvl_lgr'], 'long_name', 'Wavelength')
        netCDFHandler.createVariable("spectrum", 'f4', ('time', 'wvl_lgr'))[
            :, :] = spectrum

    netCDFHandler.history = recordTime + ': python ' + commandLine
    netCDFHandler.close()


if __name__ == '__main__':
    fileInputLocation, fileOutputLocation = sys.argv[1], sys.argv[2]
    if not os.path.exists(fileOutputLocation) and not fileOutputLocation.endswith('.nc'):
        os.mkdir(fileOutputLocation)  # Create folder

    if not os.path.isdir(fileInputLocation) or fileOutputLocation.endswith('.nc'):
        print "Processing", fileInputLocation + '....'
        tempJSONMasterList, wavelength, spectrum = JSONHandler(
            fileInputLocation)
        if not os.path.isdir(fileOutputLocation):
            main(tempJSONMasterList, fileOutputLocation, wavelength, spectrum,
                 _timeStamp(), sys.argv[1] + ' ' + sys.argv[2])
        else:
            outputFileName = os.path.split(fileInputLocation)[-1]
            main(tempJSONMasterList, os.path.join(fileOutputLocation,
                                                  outputFileName.strip('.json') + '.nc'), wavelength, spectrum,
                 _timeStamp(), sys.argv[1] + ' ' + sys.argv[2])
    else:  # Read and Export netCDF to folder
        for filePath, fileDirectory, fileName in os.walk(fileInputLocation):
            for members in fileName:
                if os.path.join(filePath, members).endswith('.json'):
                    print "Processing", members + '....'
                    outputFileName = members.strip('.json') + '.nc'
                    tempJSONMasterList, wavelength, spectrum = JSONHandler(
                        os.path.join(filePath, members))
                    main(tempJSONMasterList, os.path.join(
                        fileOutputLocation, outputFileName),
                        wavelength, spectrum, _timeStamp(), sys.argv[1] + ' ' + sys.argv[2])
