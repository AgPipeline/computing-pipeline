#!/usr/bin/env python

'''
EnvironmentalLoggerAnalyser.py

----------------------------------------------------------------------------------------
This module will read data generated by Environmental Sensor and convert to netCDF file
----------------------------------------------------------------------------------------
Prerequisite:
1. Python (2.7+ recommended)
2. netCDF4 module for Python (and its dependencies)
3. numpy (For array calculations, make sure the numpy has the same Python verison as other modules)
----------------------------------------------------------------------------------------

Usage: Give full path to EnvironmentalLoggerAnalyser.py, or place it in PYTHONPATH, then:

python EnvironmentalLoggerAnalyser.py drc_in drc_out # Process all files in drc_in
python EnvironmentalLoggerAnalyser.py  fl_in drc_out # Process only fl_in
where drc_in is input directory, drc_out is output directory, fl_in is input file
Input  filenames must have '.json' extension
Output filenames are replace '.json' with '.nc'

UCI test:
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py ${DATA}/terraref/environmentlogger_test.json ${DATA}/terraref

UCI production:
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py ${DATA}/terraref/EnvironmentLogger/2016-04-07/2016-04-07_12-00-07_enviromentlogger.json ~/rgr

Roger production:
module add gdal-stack-2.7.10
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py /projects/arpae/terraref/raw_data/ua-mac/EnvironmentLogger/2016-04-07/2016-04-07_12-00-07_enviromentlogger.json ~/rgr
python ${HOME}/terraref/computing-pipeline/scripts/hyperspectral/EnvironmentalLoggerAnalyser.py /projects/arpae/terraref/raw_data/ua-mac/EnvironmentLogger/2016-06-01/2016-06-01_10-52-52_environmentlogger.json ~/rgr

EnvironmentalLoggerAnalyser.py takes the first argument as the input folder (containing JSON files,
but it can also be one single file) and the second argument as the output folder (output netCDF files go here).
If the output folder does not exist, EnvironmentalLoggerAnalyser.py creates it.

----------------------------------------------------------------------------------------
20160429: Output JSON file is now completely composed by variables
          2D spectrometer variables (wavelength and spectrum) are available in the exported file
20160503: Add chunksizes parameters for time, which significantly reduces the processing time (and the file size)
          Add timestamps and commandLine the user used for each exported file
          Remind the user currently the script is dealing with which file
20160508: 1. "timestamp" array are double-precison, with unit of days offset from UNIX base time (Gregorian Calender)
          2. Remove unnecessary I/O (in wavelength, because we only need the wavelengths in the first set of readings)
20160509: 1. Retrieve the adjustment Professor Zender made in version a38ca7d, May 4th
          2. Rename wavelength variable and dimension as "wvl_lgr" to avoid name collision with Hyperspectral wavelengths
20160511: Add variables and calculations from terraref.nco, including wvl_dlt and flx_sns
          Add new array flx_spc_dwn (downwelling spectral flux) to the netCDF file
20160512: Recalculate downwellingSpectralFlux, save Flux sensitivity in SI
20160517: Implement variable wavelength
20160518: 1. Add numpy module, now the array calculation will be done by numpy to improve efficiency
          2. Add Downwelling Flux (the previous one is recognized and renamed as Downwelling spectral flux)
20160519: 1. Recalculate and double check the method used for calculating downwelling spectral flux
          2. Reinstate the integration time and sensor area (based on the discussion about the dimension of the flux sensitivity)
          3. Clean up based on Professor Zender's adjustment
20160526: All units are now in SI

----------------------------------------------------------------------------------------
Note:
If you need a different base time, it is named "_UNIX_BASETIME" and located at the
beginning of the script as a global variable. You could simply change the parameters
as they are named.

----------------------------------------------------------------------------------------
Thanks for the advice from Professor Zender and testing data from Mr. Maloney
----------------------------------------------------------------------------------------
'''
import numpy as np
import json
import time
import sys
import os
from datetime import date, datetime
from netCDF4 import Dataset
from CalculationWorks import *


_UNIT_DICTIONARY = {u'm': {"original":"meter", "SI":"meter", "power":1}, 
                    u"hPa": {"original":"hectopascal", "SI":"pascal", "power":1e2},
                    u"DegCelsius": {"original":"celsius", "SI":"celsius", "power":1},
                    u's': {"original":"second", "SI":"second", "power":1}, 
                    u'm/s': {"original":"meter second-1", "SI":"meter second-1", "power":1}, 
                    u"mm/h": {"original":"millimeter hour-1", "SI":"meter second-1", "power":2.78e-7},
                    u"relHumPerCent": {"original":"percent", "SI":"percent", "power":1}, 
                    u"?mol/(m^2*s)": {"original":"micromole meter-2 second-1", "SI":"mole second-1", "power":1e-6}, 
                    u"umol/(m^2*s)": {"original":"micromole meter-2 second-1", "SI":"mole second-1", "power":1e-6},
                    u'kilo Lux': {"original":"kiloLux", "SI":"lux", "power":1e3}, 
                    u'degrees': {"original":"degree", "SI":"degree", "power":1}, 
                    u'?s': {"original":"microsecond", "SI":"second", "power":1e-6}, 
                    u'us': {"original":"microsecond", "SI":"second", "power":1e-6}, 
                    '': ''}
_NAMES = {'sensor par': 'Sensor Photosynthetically Active Radiation'}
_UNIX_BASETIME = date(year=1970, month=1, day=1)

def wavelengthSpectrumAnddownwellingSpectralFlux(fileLocation):
    '''
    This function will format the source JSON file including multiple JSON objects
    into a file of JSON array
    '''
    with open(fileLocation, 'r') as fileHandler:
        tempList, wvl_lgr, spectrum, k, writeToWavelength = fileHandler.read().split('\n'), [], [[]], 0, True

        for i in range(len(tempList)):
            if "wavelength" in tempList[i] and writeToWavelength:
                wvl_lgr.append(float(tempList[i][tempList[i].find(':') + 1: -2]) * 1e-9)
            if "wavelength" not in tempList[i] and "wavelength" in tempList[i - 4] and "band" not in tempList[i] and "," not in tempList[i]:
                writeToWavelength = False
                spectrum.append([])
                k += 1
            if "spectrum" in tempList[i]:
                spectrum[k].append(float(tempList[i][tempList[i].find(':') + 1: -2]))

        spectrum.remove([])

    downwellingSpectralFlux, downwellingFlux = calculateDownwellingSpectralFlux(wvl_lgr, spectrum)

    return wvl_lgr, spectrum, downwellingSpectralFlux

def JSONHandler(fileLocation):
    '''
    Main JSON handler, write JSON file to a Python list with standard JSON module
    '''
    wavelength, spectrum, downwellingSpectralFlux = wavelengthSpectrumAnddownwellingSpectralFlux(
        fileLocation)
    with open(fileLocation, 'r') as fileHandler:
        return json.loads(fileHandler.read()), wavelength, spectrum, downwellingSpectralFlux


def renameTheValue(name):
    '''
    Rename the value so it becomes legal in netCDF
    '''
    if type(name) is unicode:
        name = name.encode('ascii', 'ignore')
    if name in _UNIT_DICTIONARY:
        name = _UNIT_DICTIONARY[name]
    elif name in _NAMES:
        name = _NAMES[name]

    return name.replace(" ", "_")


def getSpectrometerInformation(arrayOfJSON):
    '''
    Collect information from spectrometer with special care
    '''
    maxFixedIntensity = [int(intensityMembers["spectrometer"]["maxFixedIntensity"]) for intensityMembers in arrayOfJSON]
    integrationTime = [int(integrateMembers["spectrometer"]["integration time in ?s"]) for integrateMembers in arrayOfJSON]

    return maxFixedIntensity, integrationTime


def getListOfValue(arrayOfJSON, dataName):
    '''
    Collect data from JSON objects which have "value" member
    '''
    return [float(valueMembers[dataName]['value'].encode('ascii', 'ignore')) for valueMembers in arrayOfJSON]


def getListOfRawValue(arrayOfJSON, dataName):
    '''
    Collect data from JSON objects which have "rawValue" member
    '''
    return [float(valueMembers[dataName]['rawValue'].encode('ascii', 'ignore')) for valueMembers in arrayOfJSON]


def _timeStamp():
    '''
    Record the time the script is triggered
    '''
    return time.strftime("%a %b %d %H:%M:%S %Y",  time.localtime(int(time.time())))


def translateTime(timeString):
    '''
    Translate the time the metadata included as the days offset to the basetime.
    '''
    timeUnpack = datetime.strptime(timeString, "%Y.%m.%d-%H:%M:%S").timetuple()
    timeSplit = date(year=timeUnpack.tm_year, month=timeUnpack.tm_mon, day=timeUnpack.tm_mday) - _UNIX_BASETIME

    return (timeSplit.total_seconds() + timeUnpack.tm_hour * 3600.0 + timeUnpack.tm_min * 60.0 + timeUnpack.tm_sec) / (3600.0 * 24.0)


def main(JSONArray, outputFileName, wavelength=None, spectrum=None, downwellingSpectralFlux=None, recordTime=None, commandLine=None):
    '''
    Main netCDF handler, write data to the netCDF file indicated.
    '''
    netCDFHandler         = Dataset(outputFileName, 'w', format='NETCDF4')
    dataMemberList        = [JSONMembers[u"environment_sensor_set_reading"] for JSONMembers in JSONArray]
    timeList              = [translateTime(JSONMembers[u'timestamp']) for JSONMembers in dataMemberList]
    timeStampList         = [JSONMembers[u'timestamp'] for JSONMembers in dataMemberList]
    timeDimension         = netCDFHandler.createDimension("time", None)
    tempTimeStampVariable = netCDFHandler.createVariable("timestamp", str, ("time",), chunksizes=(1,))
    for i in range(len(timeStampList)):
        tempTimeStampVariable[i] = timeStampList[i]
    tempTimeVariable      = netCDFHandler.createVariable(
        'time', 'f8', ('time',), chunksizes=(1,))
    for i in range(len(timeList)):  # Assign Times
        tempTimeVariable[i] = timeList[i]
    setattr(tempTimeVariable, "units",    "days since 1970-01-01 00:00:00")
    setattr(tempTimeVariable, "calender", "gregorian")

    for data in dataMemberList[0]:
        if data != 'spectrometer' and type(dataMemberList[0][data]) not in (str, unicode):
            tempVariable = netCDFHandler.createVariable(
                renameTheValue(data), 'f8', ('time',))
            if 'unit' in dataMemberList[0][data]:  # Assign Units
                #If it is not in SI, then the script will convert it to SI
                setattr(tempVariable, 'units', _UNIT_DICTIONARY[dataMemberList[0][data]['unit']]["SI"])
                tempVariable[:] = np.array(getListOfValue(dataMemberList, data)) * _UNIT_DICTIONARY[dataMemberList[0][data]['unit']]["power"]# Assign "values"
            else:
               tempVariable[:] = getListOfValue(dataMemberList, data)# Assign "values"
            if 'rawValue' in dataMemberList[0][data]:  # Assign "rawValues"
                netCDFHandler.createVariable(renameTheValue(data) + '_rawValue', 'f4', ('time',))[:] =getListOfRawValue(dataMemberList, data)
        elif type(dataMemberList[0][data]) in (str, unicode) and data != "timestamp":
            netCDFHandler.createVariable(renameTheValue(data), str)[0] = dataMemberList[0][data]

        if data == 'spectrometer':  # Special care for spectrometers :)
            netCDFHandler.createVariable('Spectrometer_maxFixedIntensity', 'f4', ('time',))[:] = getSpectrometerInformation(dataMemberList)[0]
            netCDFHandler.createVariable('Spectrometer_Integration_Time_In_Microseconds', 'f4', ('time',))[:] = getSpectrometerInformation(dataMemberList)[1]

    if wavelength and spectrum:
        netCDFHandler.createDimension("wvl_lgr", len(wavelength))
        netCDFHandler.createVariable("wvl_lgr", 'f4', ('wvl_lgr',))[:] = wavelength
        setattr(netCDFHandler.variables['wvl_lgr'], 'units', 'meter')
        setattr(netCDFHandler.variables['wvl_lgr'], 'long_name', 'Wavelength')
        netCDFHandler.createVariable("spectrum", 'f4', ('time', 'wvl_lgr'))[:, :] = spectrum

    wvl_ntf  = [np.average([wavelength[i], wavelength[i+1]]) for i in range(len(wavelength)-1)]
    delta = [wvl_ntf[i+1] - wvl_ntf[i] for i in range(len(wvl_ntf) - 1)]
    delta.insert(0, 2*(wvl_ntf[0] - wavelength[0]))
    delta.insert(-1, 2*(wavelength[-1] - wvl_ntf[-1]))

    # Add data from terraref.nco
    netCDFHandler.createVariable("wvl_dlt", 'f8', ("wvl_lgr",))[:] = delta
    setattr(netCDFHandler.variables['wvl_dlt'], 'units', 'meter')
    setattr(netCDFHandler.variables['wvl_dlt'], 'notes',"Bandwidth, also called dispersion, is between 0.455-0.495 nm across all channels. Values computed as differences between midpoints of adjacent band-centers.")
    setattr(netCDFHandler.variables['wvl_dlt'], 'long_name', "Bandwidth of environmental sensor")

    netCDFHandler.createVariable("flx_sns", "f4", ("wvl_lgr",))[:] = np.array(FLX_SNS) * 1e-6
    setattr(netCDFHandler.variables['flx_sns'],'units', 'watt meter-2 count-1')
    setattr(netCDFHandler.variables['flx_sns'],'long_name','Flux sensitivity of each band (irradiance per count)')
    setattr(netCDFHandler.variables['flx_sns'], 'provenance', "EnvironmentalLogger calibration information from file S05673_08062015.IrradCal provided by TinoDornbusch and discussed here: https://github.com/terraref/reference-data/issues/30#issuecomment-217518434")

    netCDFHandler.createVariable("flx_spc_dwn", 'f4', ('time','wvl_lgr'))[:,:] = downwellingSpectralFlux
    setattr(netCDFHandler.variables['flx_spc_dwn'],'units', 'watt meter-2 meter-1')
    setattr(netCDFHandler.variables['flx_spc_dwn'], 'long_name', 'Downwelling Spectral Irradiance')

    # Downwelling Flux = summation of (delta lambda(_wvl_dlt) * downwellingSpectralFlux)
    netCDFHandler.createVariable("flx_dwn", 'f4').assignValue(np.sum(downwellingSpectralFlux))
    setattr(netCDFHandler.variables["flx_dwn"], "units", "watt meter-2")
    setattr(netCDFHandler.variables['flx_dwn'], 'long_name', 'Downwelling Irradiance')

    #Other Constants used in calculation
    #Integration Time
    #fxm Jerome the value should be as read from the metadata, not hardcoded as 5000.0
    netCDFHandler.createVariable("time_integration", 'f4').assignValue(5000.0/1.0e-6)
    setattr(netCDFHandler.variables["time_integration"], "units", "second")
    setattr(netCDFHandler.variables['time_integration'], 'long_name', 'Spectrometer integration time')

    #Spectrometer area
    #fxm where does AREA come from? should be read from metadata
    netCDFHandler.createVariable("area_sensor", "f4").assignValue(AREA)
    setattr(netCDFHandler.variables["area_sensor"], "units", "meter2")
    setattr(netCDFHandler.variables['area_sensor'], 'long_name', 'Spectrometer Area')

    netCDFHandler.history = recordTime + ': python ' + commandLine
    netCDFHandler.close()

if __name__ == '__main__':
    fileInputLocation, fileOutputLocation = sys.argv[1], sys.argv[2]
    if not os.path.exists(fileOutputLocation) and not fileOutputLocation.endswith('.nc'):
        os.mkdir(fileOutputLocation)  # Create folder

    if not os.path.isdir(fileInputLocation) or fileOutputLocation.endswith('.nc'):
        print "Processing", fileInputLocation + '....'
        tempJSONMasterList, wavelength, spectrum, downwellingSpectralFlux = JSONHandler(fileInputLocation)
        if not os.path.isdir(fileOutputLocation):
            main(tempJSONMasterList, fileOutputLocation, wavelength, spectrum, downwellingSpectralFlux, _timeStamp(), sys.argv[1] + ' ' + sys.argv[2])
        else:
            outputFileName = os.path.split(fileInputLocation)[-1]
            main(tempJSONMasterList, os.path.join(fileOutputLocation, outputFileName.strip('.json') + '.nc'), wavelength, spectrum, downwellingSpectralFlux, _timeStamp(), sys.argv[1] + ' ' + sys.argv[2])
    else:  # Read and Export netCDF to folder
        for filePath, fileDirectory, fileName in os.walk(fileInputLocation):
            for members in fileName:
                if os.path.join(filePath, members).endswith('.json'):
                    print "Processing", members + '....'
                    outputFileName = members.strip('.json') + '.nc'
                    tempJSONMasterList, wavelength, spectrum, downwellingSpectralFlux = JSONHandler(os.path.join(filePath, members))
                    main(tempJSONMasterList, os.path.join(fileOutputLocation, outputFileName), wavelength, spectrum, downwellingSpectralFlux, _timeStamp(), sys.argv[1] + ' ' + sys.argv[2])
