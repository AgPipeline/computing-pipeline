// -*-C++-*-

/* Purpose: NCO/ncap2 script to Combine 2D TR fractional exposure into single 3D variable
   Usage:
   ncap2 -v -O -s \*bnd_nbr=926 -S ~/terraref/computing-pipeline/scripts/hyperspectral/terraref.nco ${DATA}/terraref/test_raw.nc ${DATA}/terraref/test_raw_3d.nc
   ncap2 -v -O -S ~/terraref/computing-pipeline/scripts/hyperspectral/terraref.nco ${DATA}/terraref/whiteReference_raw.nc ${DATA}/terraref/whiteReference_3d.nc
   ncap2 -v -O -s \*bnd_nbr=926 -S ~/terraref/computing-pipeline/scripts/hyperspectral/terraref.nco ${DATA}/terraref/whiteReference_raw.nc ${DATA}/terraref/whiteReference_3d.nc
   ncap2 -v -O -s \*bnd_nbr=926 -S ~/terraref/computing-pipeline/scripts/hyperspectral/terraref.nco ${DATA}/terraref/MovingSensor/SWIR/2016-03-05/2016-03-05__09-46_17_450/8d54accb-0858-4e31-aaac-e021b31f3188_raw.nc ${DATA}/terraref/foo_3d.nc
   ncap2 -v -O -s \*bnd_nbr=955 -S ~/terraref/computing-pipeline/scripts/hyperspectral/terraref.nco ${DATA}/terraref/MovingSensor/VNIR/2016-03-05/2016-03-05__09-46_17_450/72235cd1-35d5-480a-8443-14281ded1a63_raw.nc ${DATA}/terraref/foo_3d.nc */

// Declare flags as RAM variables or they will clutter output file
*flg_tst=1s; // [flg] Test mode
*flg_prd=0s; // [flg] Production mode

// Run in test or production mode?
*flg_typ=flg_prd; // [enm] Run type

// Defaults for values not provided on command-line
if(!exists(bnd_nbr)) *bnd_nbr=926; // [nbr] SWIR camera has 926 bands
//if(!exists(bnd_nbr)) *bnd_nbr=955; // [nbr] VNIR camera has 955 bands

defdim("band",bnd_nbr); 
xps_frc[band,x,y]=0.0f; 
xps_frc@long_name="Fractional exposure";
xps_frc@meaning="Ratio of actual to fully exposed (saturated) channel";
xps_frc@units="fraction";
set_miss(xps_frc,Band1@_FillValue);
band[band]=0.0f;
band@long_name="Wavelength";
band@units="nanometer";

for(*bnd_idx=1;bnd_idx<=bnd_nbr;bnd_idx++){
  // Current variable has name produced by gdal_translate
  {  
   @var_crr=snprint(bnd_idx,"Band%d"); 
   @wavelength=snprint(bnd_idx,"Band%d@wavelength"); 
  }
  if(flg_typ == flg_tst) print(@var_crr,"%s ");

  // Copy band 2D raster into 3D image hypercube
  xps_frc((bnd_idx-1),:,:)=*@var_crr;   

  // Copy wavelength attribute into band coordinate
  band(bnd_idx-1)=*@wavelength;
 } // !bnd_idx

// Debugging sanity check: Ensure, e.g., Band10 minus tenth band is zero
if(flg_typ == flg_tst){
  err_chk10=(Band10-xps_frc(9,:,:)).total();
  err_chk300=(Band300-xps_frc(299,:,:)).total();
  err_chk926=(Band926-xps_frc(925,:,:)).total();
  print(err_chk10);
  print(err_chk300);
  print(err_chk926);
} // !flg_typ
